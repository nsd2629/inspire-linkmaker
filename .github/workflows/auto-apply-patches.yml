name: Auto Apply Patches and Deploy

on:
  push:
    branches: [ "production" ]
    paths:
      - 'patches/queue/*.patch.json'

permissions:
  contents: write
  pull-requests: write

jobs:
  apply-patches:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Read patch meta
        id: meta
        run: |
          FILE=$(ls patches/queue/*.patch.json | head -n1)
          echo "file=$FILE" >> $GITHUB_OUTPUT
          TITLE=$(jq -r '.title' "$FILE")
          BRANCH="auto/patch-$(date +%Y%m%d-%H%M%S)"
          echo "title=$TITLE" >> $GITHUB_OUTPUT
          echo "branch=$BRANCH" >> $GITHUB_OUTPUT

      - name: Create patch branch
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git checkout -b "${{ steps.meta.outputs.branch }}"

      - name: Apply patch JSON
        run: |
          FILE="${{ steps.meta.outputs.file }}"
          COUNT=$(jq '.changes | length' "$FILE")
          for i in $(seq 0 $((COUNT-1))); do
            TARGET=$(jq -r ".changes[$i].path" "$FILE")
            ANCHOR=$(jq -r ".changes[$i].anchor" "$FILE")
            MODE=$(jq -r ".changes[$i].mode" "$FILE") # replace/insert_before/insert_after/append
            CODE=$(jq -r ".changes[$i].code" "$FILE")

            mkdir -p "$(dirname "$TARGET")"
            [ -f "$TARGET" ] || touch "$TARGET"

            if [ "$MODE" = "replace" ]; then
              printf "%s" "$CODE" > "$TARGET"
            elif [ "$MODE" = "insert_before" ]; then
              awk -v a="$ANCHOR" -v code="$CODE" 'index($0,a){print code; print; next}1' "$TARGET" > "$TARGET.new" && mv "$TARGET.new" "$TARGET"
            elif [ "$MODE" = "insert_after" ]; then
              awk -v a="$ANCHOR" -v code="$CODE" 'index($0,a){print; print code; next}1' "$TARGET" > "$TARGET.new" && mv "$TARGET.new" "$TARGET"
            else
              printf "\n%s\n" "$CODE" >> "$TARGET"
            fi
          done

      - name: Commit changes
        run: |
          git add -A
          git commit -m "auto: apply patch â€“ ${{ steps.meta.outputs.title }}"

      - name: Push branch
        run: git push --set-upstream origin "${{ steps.meta.outputs.branch }}"

      - name: Create PR
        id: cpr
        uses: peter-evans/create-pull-request@v6
        with:
          title: "auto: ${{ steps.meta.outputs.title }}"
          body: "Generated by auto-apply-patches workflow."
          branch: "${{ steps.meta.outputs.branch }}"
          base: "production"
          labels: "auto,patch"

      - name: Auto-merge (squash)
        if: steps.cpr.outputs.pull-request-number
        uses: peter-evans/enable-pull-request-automerge@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          pull-request-number: ${{ steps.cpr.outputs.pull-request-number }}
          merge-method: squash

      - name: Merge PR
        if: steps.cpr.outputs.pull-request-number
        uses: peter-evans/merge-pull-request@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          pull-request-number: ${{ steps.cpr.outputs.pull-request-number }}
          merge-method: squash

  build-and-deploy:
    needs: apply-patches
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'

      - name: Install deps
        run: npm ci

      - name: Build (Vite)
        run: npm run build

      - name: Deploy with Wrangler
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: |
            pages deploy dist \
              --project-name ${{ secrets.CLOUDFLARE_PROJECT_NAME }} \
              --branch production
